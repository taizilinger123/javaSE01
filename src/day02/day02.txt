Object 
  1)类默认继承于Object,所以类的最终父类型是Object
          体现：一切皆对象
    Object  定义的变量可以引用任何类型的实例
    Object  称为继承根。
  2)Object  定义了很多基本方法，被子类型继承 
    
    tostring() 建议重写，返回这个对象的文本描述
    equals()   建议重写，比较两个对象是否相等
      ==  只能比较变量值， 不能用于比较对象是否相等。 
    hashCode() 建议与equals一起重写。
               当两个对象相等时候，hashCode()返回值一样
               当两个对象不相等时候，hashCode()返回值尽量不同                           
String 字符串
  1)是系统核心的数据输入输出类！凡是界面上的文本信息都是
   String.  
    
   int a = 120;
   System.out.println(a);//"120"
   System.out.println(String.valueOf(a));
   
  2)字符串对象是不可改变的！(String使用不变模式设计)
  3)字符串的内部结构
    String{ char[] + char[] 有关的算法！}
          完全可以
    {char[] + 算法}   替代  String API 方法
               可以优化很快                      性能很好
                  编码量大                           编码简洁

    Tetromino {Cell[] + Cell[] 算法  }
    
    Stack(数据 + 数据算法)
  4) "静态字符串"的优化现象
    4.1)"静态字符串"  字面量， 常量， 和字面量常量的表达式
              注意：字面量常量的表达式在编译期间运算， 优化为字面量
    4.2)动态字符串，都是在运算期间堆中创建，不参与静态优化
               动态字符串：使用new运算创建，变量连接结果
    
    典型试题：
    String s = new String("ABC");
          如上代码描述正确的是：
     A 运行期间会创建两个字符串对象
     B 运行期间会创建两个对象
     C 运行期间会创建一个字符串对象
     D 运行期间会创建一个个对象
    
  5) 字符串常用API方法(算法)
     length()返回字符串的长度
     charAt()
     toUpperCase()
     indexOf()
     endsWith()
     startsWith()
     substring()
     trim()
  
  正则表达式：
     1) 是字符串的检索匹配规则
            如：
       regex(匹配规则): hi 
	       被检索的文本(字符串): hi, i am tom in china
	       检索结果:
	   Found "hi" starting index 0 ending index 2
	   Found "hi" starting index 17 ending index 19
     2)正则表达式使用广泛：eclipse linux java c# PHP ...
     3)是字符序列匹配规则
                如：hi 表示匹配两个字符的序列，第一个是h第二个i 
     4)字符集：匹配多个字符的某一个
                如：h[ijk]表示匹配两个字符的序列，第一个是h第二个i/j/k 
         [0123456789]表示匹配1个字符，是数字字符
         
                数字字符集：[0123456789]  == [0-9] == \d  
                          
                检索邮政编码：
          [0-9][0-9][0-9][0-9][0-9][0-9]  
          \d\d\d\d\d\d   \d{6}
          
                预定义(缩写)字符集
          \d 数字字符
          \w 单词字符 == [a-zA-Z0-9_]
          \s 空白字符
                          . 任意一个字符
          
          \D 非数字
          \S 非空白
          \W 非单词字符         
          
           
     5)数量词 
       X{n}    n个X
       X{n,m}  n到m个X
       X{n,}   n个以上X
                 缩写(预定义)数量词
        ? == {0,1}
        + == {1,}
        * == {0,}
        
     6)边界匹配
                    ^ 字符串开始
                    $ 字符串结束 
            详细参考：java.util.regex.Pattern     
     http://jszx-jxpt.cuit.edu.cn/JavaAPI/overview-summary.html
     JavaTM 2 Platform Standard Edition 5.0 API 规范          
     7)正则表达式的应用：
                 表单验证：
                 用户名规则：从头到尾连续8~10个单词字符
                      正则规则：^\w{8,10}$
                 ^\d{11}$
         IP地址规则:\d{1,3}\.\d{1,3}.\d{1,3}.\d{1,3}
                 \d{1,3}(\.\d{1,3}){3}
                 ^\d{1,3}(\.\d{1,3}){3}$
                      电话号码： +86 15601035818
                ^(\+86)?\s*\d{11}$
                ^(\+86)?\s+\d{11}$
                        测试案例：15601035818
                 +8615601035818
                 +86 15601035818
                 +86  15601035818        
                               
     8)分组()   
                            
     9)特殊字符转义
	       匹配.    使用\. 
	       匹配[    使用\[
	       匹配 |   使用\|
	       匹配 \   使用\\
       
     10)java String 中对正则表达式的支持
       match(正则表达式)
                 将一个字符串与正则表达式进行匹配，如果匹配成功就返回true,否则返回false
       
       String name = "hi1234";
       boolean pass = name.matches("^\\w{8,10}$");false
     
     11)字符串拆分
                  数据："5, tom, 5, tom@tom.com, 119"
                  拆分为：["5", "tom", "5", "tom@tom.com", "119"]             
             
       str.split(",\\s?")
       
     12) String  matches  split  replaceAll 
 
			StringBuilder 可变字符串
			String 是不可变的字符串
			
			String{char[] + 算法(不改变内容，经常返回新字符串)}
			
			StringBuilder{char[] + 算法(改变了char[]的内容，当容量
			不足时候，还进行扩容操作)}
			
			Tetromino{Cell[] + 算法}
			StringBuilder 类的总结
			1)Java 的字符串连接的过程是利用StringBuilder实现的
			  String s = "AB";
			  String s1 = s+"DE";
			  //String s1=new StringBuilder(s).append("DE").toString()
			  
              s1 += "De";
              s1 += "De";
              s1 += "De";
              s1 += "De";
            2)建议在大量字符串计算时候利用StringBuilder完成。
                                   简单说：StringBuilder 的性能好于 String
            3)如下情形，不需要使用StringBuilder
             3.1)一行的连接运算，Java会使用一个StringBuilder实现
               ss = s1+s2+s3+s4;
               //ss = new StringBuilder(s1).append(s2).append(s3).append(s4).toString();
             3.2)静态字符串的连接
               String sql = "select boy from man "+
                    " where age<28 and age>20 "+
                    " and salary>10000"; 
            
             StringBuffer PK StringBuilder
                                 比较：StringBuffer早于StringBuilder(快)
                 StringBuffer  是线程安全的，同步处理的，性能稍慢
                 StringBuilder 是非线程安全的，并发处理的，性能稍快
                      
                                  字符串总结：
              1)Java 中代表字符串的有：char[] String StringBuilder
              2)char[] 只是字符数据，没有算法，可以自己实现
                                        如果优化的好，性能最优！开发效率低
              3)String 是不可变字符串，是最常用的字符串，界面文本数据
                                         就是使用String输出的.API经常返回新String对象，性能稍差.
                                         如：System.out.println(120)
                                           实际上System.out.println(String.valueOf(120));
              4)StringBuilder 是可变字符串，字符串的内容计算，建议采用
                 StringBuilder实现.性能好.  
              
              Java中的时间
               1)是一个long类型是整数，是GMT 1970元旦到现在累计的毫秒数
               2)java.util.Date 封装了公元历法 算法
               Date {long + 公元历法 算法 }           
                                             缺点：y2k  千年问题，以及地区和国家问题  不适合时间计算
                                             替代方案：calendar  地区和国家问题   适合时间计算                         
                                             
               3)Date API 方法：
                getYear(); 有2000年问题，返回2位数年份
                                              如：1998    返回        98        1999      返回    99 
                     2000 返回 100   2013 返回 113    
                     98  + 1900 = 1998 
                     99  + 1900 = 1999
                     100 + 1900 = 2000                       
                getMonth();
                getDay();
                getTime();返回的是long 毫秒数
                setTime(long)修改时间毫秒数
                
                
                                   测试案例：
                1) 当前时间测试
                2) 时间原点(long 0)测试
                   setTime(0)
                3) 思考如何表示明天？
                                            明天 = 今天毫秒数 + 一天毫秒数 
                   setTime(明天)               
                4)SimpleDateFormat 日期时间输出的工具类，非常方便
                 SimpleDateFormat fmt = 
                     new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");                     
                5)时间的计算的原理：是毫秒数的 + - 与历法规则有关！
                
                SimpleDateFormat的作用
	            1：将Date对象转换为特定格式的字符串
	            2：将字符串按照特定格式转换为Date对象  
			          实现第一个功能使用：format方法
			          实现第二个功能使用：parse方法         
			          
			    DateFormat类
			          是SimpleDateFormat的父类，创建实例时只需要调用提供的一个静态方法getInstance(). 
			          这种方法是工厂方法
			          
			    Calendar类
			          可以方便的进行日期的计算
			          获取日期中的信息时考虑了时区等问题。     
			          
			          创建实例通常可以使用提供的工厂方法
			    getInstance()
			          该方法自动根据当前系统所处地区创建对应时区的实现类
			   
			          通过Calendar可以方便的设置一个时间.
			          方法是：set(int field, int value); 
			          获取Calendar所描述的时间的某个信息，可以调用
			    get(int field)方法获取             
			    
			          计算时间的方法:add(int field, int value)
			          将给定的时间单位累加给定的值并使当前calendar代表
			          这个时间      
			          
			    包装类
			    因为java中有8个基本类型数据，他们不是以对象形式存在，他们
			    自然也不是Object的子类。
			    那么在参与面向对象开发时会遇到很多阻碍，为此，java提供了针对
			    8中基本类型数据的包装类使之可以将基本类型转化为以对象形式存在
			    ，参与 面向对象开发          
			    
			    基本类型                                                     包装类
			    int                                                                Integer
			    char                                                            Character  
			    byte                                                            Byte 
			    short                                                           Short  
			    long                                                             Long  
			    float                                                            Float  
			    double                                                        Double 
			    boolean                                                     Boolean  
			    
		包装类要掌握如何从字符串转换为对应的基本类型数据。	    
		
		知道包装类的作用：让基本类型数据可以参与面向对象开发
		
		知道在java 1.4的时候不能使用自动拆装箱特性	
			                           
        BigDecimal类
        当我们需要对小数做精确计算时，若double都不足以描述时，
        就需要使用该类。该类可以对小数做精确计算。                         
        
        BigInteger
        用于保存更长的整数，取值范围只受内存限制
                                 
                                          
            
     
    
    
    
                        
               
    
    
    
    
    
    
    
    
    
    
    