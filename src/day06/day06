HashSet存取元素需要依靠元素的
hashcode()方法的返回值
hashcode()方法是Object定义的方法

public  int  hashCode()
重写该方法时要注意：
1：应与equals方法的一致：当两个对象equals方法
比较为true时，hashCode()方法返回的数字应该相同
2：不同的对象hashCode()值应尽量避免相同

数据结构 Map  
Map接口定义的集合包含两部分，
key-value以键值对的形式保存元素
可以把map看作是一个多行两列的表格

根据内部实现的不同，我们常使用HashMap
也有通过二叉树实现的TreeMap 
在Map中，key是不重复的。

存取数据的方法
V  put(K  k, V  v):根据给定的key存放给定的value.
若使用已存在的key存放元素，那么就是替换value操作，返回值则是
被替换的元素。否则返回null。

V  get(Object k):根据给定的key获取对应的value,若key在map中
不存在，则返回null

boolean  containsKey(Object  k)
查看当前map中是否有给定的key 

boolean containsValue(Object  v)
查看当前map中是否有给定的value

HashMap的性能
Capacity容量：HashMap中散列数组的大小。
initial  capacity初始容量：
创建HashMap时，默认创建的散列数组的大小，这个默认值为16。

size大小：HashMap中存放的数据量

loadfactor加载因子：加载因子的默认值为0.75,该值是通过size/capacity
得到的比值。当存储的数据量超过了比值0.75时，会对散列数组进行扩容，并
对hashmap中原来的所有元素重新计算并存入新数组。

遍历map
遍历map有三种方式
获取所有的key 
获取所有的value:不太常用
获取所有的key-value 

设计模式
设计模式简单的说就是：模式化的解决方案

创建型模式：
单例模式，工厂模式

结构型模式：
装饰模式，代理模式（静态代理，动态代理）

行为型模式：
模板模式，迭代器模式

单例模式
又称为单实例模式
使用该模式设计的类，全局应保证只有一个实例。

单例模式的实现步骤：
1：私有化构造方法
2：提供一个共有的静态的可以获取当前类型实例的方法
3：定义一个私有的静态的当前类型的实例，供步骤2的方法返回

模板模式
定义一个操作中的算法过程的骨架，而将部分细节操作延迟到子类去
实现






 




























