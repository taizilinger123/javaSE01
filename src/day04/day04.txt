int[]  array  = new int[10];
array[0];

数组的弊端：
  1：数组需要定义长度，这在不知道数据量的前提下使用是比较麻烦的，因为要
  频繁的对数组进行扩容。
  2：当向数组中插入元素时，其余元素都要向后移动，这也为我们使用数组提供了
  额外的维护数组的代码量
  
java中的集合框架
Collection接口
该接口定义了集合的相关特征

该接口派生了两个子接口
List:可重复集(同一个元素可以放入若干次)
         这里所谓同一个元素指的是equals为true
         有序集
Set:不可重复集
         无序集
         
Collection定义的方法
int  size():返回集合中的元素数量
boolean  isEmpty():判断集合是否为空集合
boolean  contains(Object  o):判断集合是否包含指定的元素

void  clear():清空集合

boolean add(E e):向集合中添加元素

boolean  remove(E e):从集合中删除指定元素

boolean  addAll(Collection c):将给定集合中的所有元素添加到当前集合（并集）

boolean  removeAll(Collection c):删除当前集合中与给定集合相同的元素

Iterator iterator():返回遍历数组的地迭代器

List集合的实现类
ArrayList:内部使用数组实现的集合
LinkedList:使用链表方式实现的集合

List接口中定义的方法
get(int  index):获取指定位置的元素.

set(int index, Object  obj):将指定位置上的元素替换为给定元素，返回被替换
的元素。

add(int index, Object 0):在指定位置插入给定的元素，原来的元素顺序
向后移动。

remove(int index):删除指定位置的元素

indexOf(Object  0):查找给定元素在集合中第一次出现的位置

lastIndexOf(Object 0):查找给定元素在集合中最后一次出现的位置

Collection定义的方法
toArray():将集合转换为指定的数组

LinkedList与ArrayList
ArrayList使用数组方式实现，根据数组的实现原理，这种集合更适合查询数据，
但是对频繁的增删元素而言，效率要低

LinkedList使用链表方式实现，根据链表的实现原理，这种集合更适合增删元素，
但是对于频繁的查询元素相对效率要低.

迭代器
用于遍历集合元素
调用集合定义的方法iterator()

Iterator接口：
定义了遍历集合时的相关方法
不同的集合有着不同的迭代器实现，我们无需记住每一种具体的迭代器，
也不需要关心。我们应关心的是如何使用迭代器去遍历集合

该接口有三个常用的方法：
boolean  hasNext():是否还有元素可以获取 
object next():获取元素
void  remove():删除当前迭代出的元素

遍历集合的顺序要遵循:
问取删.删除可以不做

泛型
java1.5之后的另一个新特性。
泛型的本质就是参数化类型。在使用某个类时为方法，属性等指定类型。














            

         
         
         
         
         
         
         
         
         
         
         
         
         
         
   
  